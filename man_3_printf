.\" Manpage for _printf
.TH _printf 3 "March 2024" "Version 1.0" "User Commands"

.SH NAME
_printf \- mimic the standard function printf and produces output according to a format.

.SH SYNOPSIS
.B #include <main.h>
.sp
.B int _printf(const char *format, ...);

.SH DESCRIPTION
Function mimics the behavior of the standard function and is used to print formatted output to the standard output.
The function scans the string and writes each character to the standard output. When there is a conversion specifier, the function will call other functions via a va_list, which will convert and write the following characters according to the functions called.

Conversion specifier:

d, i   The int argument is converted to signed decimal notation.
              The precision, if any, gives the minimum number of digits
              that must appear; if the converted value requires fewer
              digits, it is padded on the left with zeros.  The default
              precision is 1.  When 0 is printed with an explicit
              precision 0, the output is empty.

 c      If no l modifier is present, the int argument is converted
              to an unsigned char, and the resulting character is
              written.

 s      If no l modifier is present: the const char * argument is
              expected to be a pointer to an array of character type
              (pointer to a string).  Characters from the array are
              written up to (but not including) a terminating null byte
              ('\0'); if a precision is specified, no more than the
              number specified are written.  If a precision is given, no
              null byte need be present; if the precision is not
              specified, or is greater than the size of the array, the
              array must contain a terminating null byte.

%      A '%' is written.  No argument is converted.  The complete
              conversion specification is '%%'.
If an output error is encountered, a negative value is returned.

.SH RETURN VALUE
The function returns the number of characters printed, excluding the null byte used to end output to strings.

.SH EXAMPLES

#include <stdio.h>

int main() {
    char ch = 'A';
    printf("Le caractère est : %c\n", ch);
    return 0;
}


#include <stdio.h>

int main() {
    char str[] = "Bonjour, monde!";
    printf("La chaîne de caractères est : %s\n", str);
    return 0;
}


#include <stdio.h>

int main() {
    printf("Pourcentage : %%\n");
    return 0;
}


#include <stdio.h>

int main() {
    int num = 42;
    printf("Nombre entier : %d\n", num);
    return 0;
}


#include <stdio.h>

int main() {
    int num = -123;
    printf("Nombre entier : %i\n", num);
    return 0;
}


.SH DATE
March 28, 2024

.SH BUGS
No known bugs.

.SH AUTH
SYLLA SElimata
ONIER Pauline
